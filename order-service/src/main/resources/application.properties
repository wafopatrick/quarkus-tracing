quarkus.http.port=8080

# Jib configuration
quarkus.container-image.group=playground
quarkus.container-image.name=order-service

# REST client for inventory
quarkus.rest-client.inventory.url=http://inventory-service:8080
quarkus.rest-client.inventory.scope=jakarta.inject.Singleton

# Kafka
mp.messaging.outgoing.orders-out.connector=smallrye-kafka
mp.messaging.outgoing.orders-out.topic=orders
mp.messaging.outgoing.orders-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.orders-out.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.orders-out.bootstrap.servers=kafka.data:9092
# ensure context propagation headers for tracing
mp.messaging.outgoing.orders-out.propagation.enabled=true

%local.mp.messaging.outgoing.orders-out.connector=smallrye-in-memory
%local.mp.messaging.outgoing.orders-out.run-on-vertx-context=true
%local.quarkus.messaging.auto-connector=false
%local.quarkus.kafka.devservices.enabled=false
%local.quarkus.smallrye-reactive-messaging.health.enabled=false

# OpenTelemetry
quarkus.otel.enabled=true
quarkus.otel.exporter.otlp.endpoint=http://jaeger-collector.observability:4317
quarkus.otel.resource.attributes=service.name=order-service
quarkus.otel.traces.sampler=parentbased_traceidratio
quarkus.otel.traces.sampler.arg=1.0

# Metrics
quarkus.micrometer.export.prometheus.path=/q/metrics

# Logging JSON with trace/span
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
