# jib configuration
quarkus.container-image.group=playground
quarkus.container-image.name=payment-service

# Kafka configuration for the payment service
mp.messaging.incoming.orders-in.auto.offset.reset=earliest
mp.messaging.incoming.orders-in.topic=orders
mp.messaging.incoming.orders-in.connector=smallrye-kafka
mp.messaging.incoming.orders-in.serializer-autodetect=false
mp.messaging.incoming.orders-in.bootstrap.servers=kafka.data:9092
mp.messaging.incoming.orders-in.value.deserializer.key=dev.playground.payment.Order
# ensure context propagation headers for tracing
mp.messaging.incoming.orders-in.propagation.enabled=true

%local.mp.messaging.incoming.orders-in.connector=smallrye-in-memory
%local.mp.messaging.incoming.orders-in.run-on-vertx-context=true
%local.quarkus.messaging.auto-connector=false
%local.quarkus.kafka.devservices.enabled=false
%local.quarkus.smallrye-reactive-messaging.health.enabled=false

# OpenTelemetry
quarkus.otel.enabled=true
quarkus.otel.exporter.otlp.endpoint=http://jaeger-collector.observability:4317
quarkus.otel.resource.attributes=service.name=payment-service
quarkus.otel.traces.sampler=parentbased_traceidratio
quarkus.otel.traces.sampler.arg=1.0

# Metrics
quarkus.micrometer.export.prometheus.path=/q/metrics

# Logging JSON with trace/span
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
